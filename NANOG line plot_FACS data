#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Jul 16 13:27:15 2025

@author: xinyuhu
"""
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
import glob
import re
from scipy.stats import ttest_ind
import numpy as np
import joypy



# Load and aggregate data
folder_paths = ['/Volumes/bifchem/Projects Hansen/Lab Members folders/XH/ManD results/XH_018/Data exported', '/Volumes/bifchem/Projects Hansen/Lab Members folders/XH/ManD results/XH_021/Data exported']

filename_pattern = r'export_(\d+)h_.*_Rep(\d+)_.*\.csv'
all_data = []

for folder in folder_paths:
    files = glob.glob(os.path.join(folder, '*.csv'))
    for file in files:
        fname = os.path.basename(file)
        match = re.match(filename_pattern, fname)
        if match:
            time = int(match.group(1))
            df = pd.read_csv(file)
            if 'GFP-A' not in df.columns:
                continue
            df = df[['GFP-A']].copy()
            df['Time'] = time
            all_data.append(df)

data = pd.concat(all_data, ignore_index=True)

# Normalize combined data to combined 0h mean
baseline_mean = data[data['Time'] == 0]['GFP-A'].mean()
data['GFP-A_normalized'] = data['GFP-A'] / baseline_mean

# Sort time for consistent plotting
data['Time'] = data['Time'].astype(int)
data['Time_str'] = data['Time'].astype(str) + 'h'

# === Ridgeline plot (optional, from before) ===
wide_df = data.pivot(columns='Time_str', values='GFP-A_normalized').dropna(axis=1, how='all')

plt.figure(figsize=(10, 6))
joypy.joyplot(wide_df, kind='kde', overlap=1, linewidth=1.5,
              colormap=plt.cm.viridis, fade=True, alpha=0.7, linecolor='black')
plt.title('Ridgeline Plot of Normalized GFP-A Distributions Over Time')
plt.xlabel('Normalized GFP-A')
plt.ylabel('Time Point')
plt.grid(False)
plt.tight_layout()
plt.savefig("/Volumes/bifchem/Projects Hansen/Lab Members folders/XH/ManD results/XH_021/Data exported/Ridgline plot_018 and 021.svg")
plt.show()

# === Calculate mean and SD per time ===
summary = data.groupby('Time')['GFP-A_normalized'].agg(['mean', 'std', 'count']).reset_index()

# === T-test of each time point vs 0h ===
pvals = []
baseline_data = data[data['Time'] == 0]['GFP-A_normalized']

for t in summary['Time']:
    if t == 0:
        pvals.append(np.nan)
        continue
    test_data = data[data['Time'] == t]['GFP-A_normalized']
    stat, p = ttest_ind(baseline_data, test_data, equal_var=False)
    pvals.append(p)

summary['p_value'] = pvals

# Optional: add significance stars

def format_pval(p):
    if p < 0.001:
        return "p < 0.001"
    else:
        return f"p = {p:.3f}"
   

#summary['significance'] = summary['p_value'].apply(sig_stars)

# === Simplified line plot reflecting ridgeline plot (Mean NANOG over time) ===
plt.figure(figsize=(8, 5))
sns.set(style='white')

# Use Time_str for x-axis labels
summary['Time_str'] = summary['Time'].astype(str) + 'h'

# Plot mean normalized GFP-A
# plt.plot(summary['Time_str'], summary['mean'], marker='o', color='tab:blue', label='Mean normalized NANOG')

# # Add shaded area for Â±1 standard deviation
# plt.fill_between(summary['Time_str'],
#                  summary['mean'] - summary['std'],
#                  summary['mean'] + summary['std'],
#                  color='tab:blue', alpha=0.3)

# plt.title('Mean Normalized NANOG (GFP-A) Over Time')
# plt.xlabel('Time')
# plt.ylabel('Normalized NANOG (to 0h)')
# plt.ylim(bottom=0.5)
# plt.grid(True)
# plt.tight_layout()
# plt.savefig("/Volumes/bifchem/Projects Hansen/Lab Members folders/XH/ManD results/XH_021/Data exported/Mean_NANOG_lineplot.svg")
# plt.show()


# === Plot line plot with shaded SD and exact p-values ===
plt.figure(figsize=(8, 5))
sns.set(style='white')

plt.plot(summary['Time'], summary['mean'], marker='o', color='tab:blue', label='Mean normalized GFP-A')
plt.fill_between(summary['Time'], summary['mean'] - summary['std'], summary['mean'] + summary['std'],
                 color='tab:blue', alpha=0.3)

# Add exact p-value text above each time point (skip 0h)
y_offset = summary['std'].max() * 1.5  # dynamic spacing
for idx, row in summary.iterrows():
    if row['Time'] == 0 or pd.isna(row['p_value']):
        continue
    plt.text(row['Time'], row['mean'] + y_offset,
             f"p = {row['p_value']:.2e}",  # scientific notation for clarity
             ha='center', fontsize=9, color='black')

print("\nSummary table with p-values:")
print(summary[['Time', 'mean', 'std', 'count', 'p_value']])

plt.title('Mean Normalized GFP-A Over Time with Exact p-values')
plt.xlabel('Time (hours)')
plt.ylabel('Normalized GFP-A (to 0h)')
plt.ylim(bottom=0.5)
plt.grid(False)
plt.legend()
plt.tight_layout()
plt.savefig("/Volumes/bifchem/Projects Hansen/Lab Members folders/XH/ManD results/XH_021/Data exported/line plot_018 and 021_with_pvalues.svg")
plt.show()


